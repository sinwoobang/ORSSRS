{"version":3,"sources":["serviceWorker.js","containers/ORS/Slider/AnswerSlider.js","components/ORSForm.js","containers/ORS/ORS.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","AnswerSlider","name","getAriaValueText","className","Slider","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","Wrapper","styled","div","Form","form","NameWrapper","SubmitBtn","Button","QuestionsWrapper","ORSForm","noValidate","autoComplete","TextField","required","label","Typography","gutterBottom","variant","color","type","AppHeader","header","Descriptor","p","ORS","Container","App","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8DCESC,EAjBM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,iBAAkBC,EAAgB,EAAhBA,UAC9C,OACE,kBAACC,EAAA,EAAD,CACED,UAAWA,EACXF,KAAMA,EACNI,aAAc,EACdH,iBAAkBA,EAClBI,kBAAgB,8BAChBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,GACLC,kBAAkB,U,ymBCRxB,IAAMC,EAAUC,IAAOC,IAAV,KAOPC,EAAOF,IAAOG,KAAV,KAMJC,EAAcJ,IAAOC,IAAV,KAKXI,EAAYL,YAAOM,IAAPN,CAAH,KAITO,EAAmBP,IAAOC,IAAV,KAiDPO,EA7CC,SAAC,GAAD,IAAGlB,EAAH,EAAGA,UAAH,OACd,kBAACS,EAAD,KACE,kBAACG,EAAD,CAAMO,YAAU,EAACC,aAAa,MAAMpB,UAAWA,GAC7C,kBAACc,EAAD,KACE,kBAACO,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,eAAKzB,KAAK,UAEtC,kBAACmB,EAAD,CAAkBjB,UAAW,aAC3B,6BACE,kBAACwB,EAAA,EAAD,CAAYxB,UAAW,WAAYyB,cAAY,GAA/C,gFAGA,kBAAC,EAAD,CAAc3B,KAAK,QAErB,6BACE,kBAAC0B,EAAA,EAAD,CAAYxB,UAAW,WAAYyB,cAAY,GAA/C,kFAGA,kBAAC,EAAD,CAAc3B,KAAK,QAErB,6BACE,kBAAC0B,EAAA,EAAD,CAAYxB,UAAW,WAAYyB,cAAY,GAA/C,yFAGA,kBAAC,EAAD,CAAc3B,KAAK,QAErB,6BACE,kBAAC0B,EAAA,EAAD,CAAYxB,UAAW,WAAYyB,cAAY,GAA/C,oGAGA,kBAAC,EAAD,CAAc3B,KAAK,SAIvB,kBAACiB,EAAD,CACEf,UAAW,YACX0B,QAAQ,YACRC,MAAM,UACNC,KAAK,UAJP,+B,oSC7DN,IAAMC,EAAYnB,IAAOoB,OAAV,KAITC,EAAarB,IAAOsB,EAAV,KA0BDC,EAjBH,kBACV,yBAAKjC,UAAU,OACb,kBAAC6B,EAAD,KACE,oCAEF,kBAACK,EAAA,EAAD,KACE,kBAACH,EAAD,osBAMA,kBAAC,EAAD,SCXSI,EAdH,WACV,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,W,cCHZC,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a39c2e10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { Slider } from \"@material-ui/core\";\n\nconst AnswerSlider = ({ name, getAriaValueText, className }) => {\n  return (\n    <Slider\n      className={className}\n      name={name}\n      defaultValue={0}\n      getAriaValueText={getAriaValueText}\n      aria-labelledby=\"discrete-slider-small-steps\"\n      step={1}\n      marks\n      min={0}\n      max={10}\n      valueLabelDisplay=\"auto\"\n    />\n  );\n};\n\nexport default AnswerSlider;\n","import AnswerSlider from \"../containers/ORS/Slider/AnswerSlider\";\nimport { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: block;\n  text-align: center;\n  padding-left: 5%;\n  padding-right: 5%;\n`;\n\nconst Form = styled.form`\n  display: inline-block;\n  width: 70%;\n  text-align: left;\n`;\n\nconst NameWrapper = styled.div`\n  margin-top: 1%;\n  margin-bottom: 5%;\n`;\n\nconst SubmitBtn = styled(Button)`\n  float: right;\n`;\n\nconst QuestionsWrapper = styled.div`\n  margin-bottom: 5%;\n`;\n\nconst ORSForm = ({ className }) => (\n  <Wrapper>\n    <Form noValidate autoComplete=\"off\" className={className}>\n      <NameWrapper>\n        <TextField required label=\"이름\" name=\"name\" />\n      </NameWrapper>\n      <QuestionsWrapper className={\"questions\"}>\n        <div>\n          <Typography className={\"question\"} gutterBottom>\n            개인적으로 (자기자신의 웰빙)\n          </Typography>\n          <AnswerSlider name=\"Q1\" />\n        </div>\n        <div>\n          <Typography className={\"question\"} gutterBottom>\n            대인적으로 (가까운 관계, 가족)\n          </Typography>\n          <AnswerSlider name=\"Q2\" />\n        </div>\n        <div>\n          <Typography className={\"question\"} gutterBottom>\n            사회적으로 (친구관계, 학교, 직장)\n          </Typography>\n          <AnswerSlider name=\"Q3\" />\n        </div>\n        <div>\n          <Typography className={\"question\"} gutterBottom>\n            전반적으로 (웰빙에 대한 전반적 느낌)\n          </Typography>\n          <AnswerSlider name=\"Q4\" />\n        </div>\n      </QuestionsWrapper>\n\n      <SubmitBtn\n        className={\"submitBtn\"}\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n      >\n        전송하기\n      </SubmitBtn>\n    </Form>\n  </Wrapper>\n);\n\nexport default ORSForm;\n","import { Container } from \"@material-ui/core\";\nimport ORSForm from \"../../components/ORSForm\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst AppHeader = styled.header`\n  text-align: center;\n`;\n\nconst Descriptor = styled.p`\n  font-size: medium;\n  text-align: left;\n  margin-top: 2%;\n  margin-bottom: 2%;\n  margin-left: 15%;\n  margin-right: 15%;\n`;\n\nconst ORS = () => (\n  <div className=\"App\">\n    <AppHeader>\n      <h1>ORS</h1>\n    </AppHeader>\n    <Container>\n      <Descriptor>\n        오늘을 포함해 지난 한주간을 돌아보면서, 다음 삶의 영역들에서 자신이\n        얼마나 잘 지냈는지 표시를 해서 자신이 그동안 어떻게 느꼈는지 제가 이해할\n        수 있게 해주시면 감사하겠습니다.왼쪽에 표시하는 것은 낮은 수준을 뜻하며,\n        오른 쪽에 표시하는 것은 높은 수준을 뜻합니다.\n      </Descriptor>\n      <ORSForm />\n    </Container>\n  </div>\n);\n\nexport default ORS;\n","import { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport ORS from \"./containers/ORS/ORS\";\nimport React from \"react\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/ors\">\n            <ORS />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}